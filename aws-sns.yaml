Resources:
  ConformitySNSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: CloudConformitySNSEncryptionKey
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-consolepolicy-3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::717210094962:root'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::717210094962:root'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
               Bool:
                 'kms:GrantIsForAWSResource': true
  ConformitySNSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/CloudConformitySNSEncryptionKey'
      TargetKeyId: !Ref ConformitySNSKey
  ConformitySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "CloudConformity"
      KmsMasterKeyId: !Ref ConformitySNSKey
  ConformitySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: cloud-conformity-sns-topic-policy
        Statement:
          - Sid: Sid1
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: ''
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
          - Sid: Sid2
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::717210094962:root
            Action:
              - 'SNS:Publish'
            Resource: !Ref ConformitySNSTopic
      Topics:
        - !Ref ConformitySNSTopic
  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ConformitySNSTopic
      Endpoint: !GetAtt ConformitySNSForwarder.Arn
      Protocol: lambda
  ConformitySNSForwarder:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('Loading function');

          exports.handler = function(event, context, callback) {
            // console.log('Received event:', JSON.stringify(event, null, 4));

            var message = event.Records[0].Sns.Message;
            console.log('Message received from SNS:', message);
            callback(null, "Success");
          };
      Description: Invoke a function during stack creation.
      TracingConfig:
        Mode: Active
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PublishVersion
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ['lambda:PublishVersion']
            Resource: '*'
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ConformitySNSForwarder.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ConformitySNSTopic