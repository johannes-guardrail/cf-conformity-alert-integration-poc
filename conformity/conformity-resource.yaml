AWSTemplateFormatVersion: '2010-09-09'
Description: Setup Conformity AWS Account with external ID

# TODO:
# - AWS Region Mapping to Conformity: Conformity Supports eu-west-1, us-west-2, ap-southeast-2, ap-south-1, eu-west-2

Parameters: 
  ConformityApiKey: 
    Description: Conformity API Key
    Type: String
    NoEcho: true
  ConformityAwsAccountName: 
    Description: Conformity AWS Account Name
    Type: String
  ConformityAwsEnvironmentName: 
    Description: Conformity AWS Environment Name
    Type: String

Resources:
  ConformityExternalIdFunction:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 15
      Environment:
        Variables:
          CONFORMITY_API_KEY: !Ref ConformityApiKey
          CONFORMITY_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
            import json
            import cfnresponse
            import urllib.request
            import os

            conformityApiKey = os.getenv('CONFORMITY_API_KEY')
            conformityRegion = os.getenv('CONFORMITY_REGION')

            headers = {
              "Content-Type": "application/vnd.api+json",
              "Authorization": "ApiKey " + conformityApiKey
            }

            externalIdEndpoint = "/v1/organisation/external-id/"
            requestUrl = "https://" + conformityRegion + "-api.cloudconformity.com" + externalIdEndpoint

            def handler(event, context):
              try:
                responseData = {}
                if event["RequestType"] == "Delete":
                  responseData['Message'] = "Delete not supported"
                elif event["RequestType"] in ["Create", "Update"]:
                  req = urllib.request.Request(requestUrl, headers = headers)
                  with urllib.request.urlopen(req) as resp:
                    body = json.loads(resp.read().decode("utf-8"))
                  externalId = body['data']['id']
                  responseData['ExternalId'] = externalId
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "ConformityExternalIdCustomResourcePhysicalID")
              except Exception as e:
                print("Exception occured:")
                print(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, "ConformityExternalIdCustomResourcePhysicalID")
      Handler: index.handler
      Role: !GetAtt ConformityFunctionRole.Arn
      Runtime: python3.6
  ConformityFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ConformityExternalIdCustomResource:
    Type: Custom::ConformityExternalId
    Properties:
      ServiceToken: !GetAtt ConformityExternalIdFunction.Arn
  ConformityCloudformationStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        AccountId: 717210094962
        ExternalId: !GetAtt ConformityExternalIdCustomResource.ExternalId
      TemplateURL: 'https://s3-us-west-2.amazonaws.com/cloudconformity/CloudConformity.template'
  ConformityAwsAccountFunction:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 15
      Environment:
        Variables:
          CONFORMITY_API_KEY: !Ref ConformityApiKey
          CONFORMITY_STACK_ROLE_ARN: !GetAtt ConformityCloudformationStack.Outputs.CloudConformityRoleArn
          CONFORMITY_AWS_ENVIRONMENT: !Ref ConformityAwsEnvironmentName
          CONFORMITY_AWS_ACCOUNT_NAME: !Ref ConformityAwsAccountName
          EXTERNAL_ID: !GetAtt ConformityExternalIdCustomResource.ExternalId
          CONFORMITY_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
            import json
            import cfnresponse
            import urllib.request
            import os

            conformityApiKey = os.getenv('CONFORMITY_API_KEY')
            conformityStackRoleArn = os.getenv('CONFORMITY_STACK_ROLE_ARN')
            conformityAwsEnvironment = os.getenv('CONFORMITY_AWS_ENVIRONMENT')
            conformityAwsAccountName = os.getenv('CONFORMITY_AWS_ACCOUNT_NAME')
            externalId = os.getenv('EXTERNAL_ID')
            conformityRegion = os.getenv('CONFORMITY_REGION')

            headers = {
              "Content-Type": "application/vnd.api+json",
              "Authorization": "ApiKey " + conformityApiKey
            }

            accountsEndpoint = "/v1/accounts/"
            requestUrl = "https://" + conformityRegion + "-api.cloudconformity.com" + accountsEndpoint

            def handler(event, context):
              try:
                print("Request Type: " + event["RequestType"])
                responseData = {}
                if event["RequestType"] == "Delete":
                  # get all accounts
                  req = urllib.request.Request(requestUrl, headers = headers)
                  with urllib.request.urlopen(req) as resp:
                    body = json.loads(resp.read().decode("utf-8"))
                  # iterate over all accounts and find the current account by name and environment
                  # this is not a unique key but it is most unlikely that customers do not create duplicates
                  for account in body['data']:
                    if account['attributes']['environment'] == conformityAwsEnvironment and account['attributes']['name'] == conformityAwsAccountName:
                      accountId = account['id']
                      req = urllib.request.Request(requestUrl + accountId, headers = headers, method='DELETE')
                      urllib.request.urlopen(req)
                  responseData['Message'] = "Delete successful"
                elif event["RequestType"] == "Create":
                  req = urllib.request.Request(requestUrl, headers = headers)
                  accountDict = {
                    "data": {
                      "type": "account",
                      "attributes": {
                        "name": conformityAwsAccountName,
                        "environment": conformityAwsEnvironment,
                        "access": {
                          "keys": {
                            "roleArn": conformityStackRoleArn,
                            "externalId": externalId
                          }
                        }
                      }
                    }
                  }
                  jsonData = json.dumps(accountDict)
                  jsondataasbytes = jsonData.encode('utf-8')
                  with urllib.request.urlopen(req, jsondataasbytes) as resp:
                    body = json.loads(resp.read().decode("utf-8"))
                  accountId = body['data']['id']
                  responseData['AccountId'] = accountId
                elif event["RequestType"] == "Update":
                  responseData['Message'] = "Update not supported"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "ConformityAwsAccountResourcePhysicalID")
              except Exception as e:
                print("Exception occured:")
                print(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, "ConformityAwsAccountResourcePhysicalID")
      Handler: index.handler
      Role: !GetAtt ConformityFunctionRole.Arn
      Runtime: python3.6
  ConformityAwsAccountResource:
    Type: Custom::ConformityAwsAccount
    Properties:
      ServiceToken: !GetAtt ConformityAwsAccountFunction.Arn
  ConformitySnsSettingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 15
      Environment:
        Variables:
          CONFORMITY_API_KEY: !Ref ConformityApiKey
          CONFORMITY_SNS_ARN: !ImportValue 'Conformity-SNS-SNSTopicArn'
          CONFORMITY_AWS_ACCOUNT_ID: !GetAtt ConformityAwsAccountResource.AccountId
          CONFORMITY_REGION: !Ref AWS::Region
      Code:
        ZipFile: |
            import json
            import cfnresponse
            import urllib.request
            import os
            import urllib.parse

            conformityApiKey = os.getenv('CONFORMITY_API_KEY')
            conformitySnsArn = os.getenv('CONFORMITY_SNS_ARN')
            conformityAwsAccountId = os.getenv('CONFORMITY_AWS_ACCOUNT_ID')
            conformityRegion = os.getenv('CONFORMITY_REGION')
            snsChannelName = "conformity-sns"

            headers = {
              "Content-Type": "application/vnd.api+json",
              "Authorization": "ApiKey " + conformityApiKey
            }
            communicationSettingsEndpoint = "/v1/settings/communication/"
            requestUrl = "https://" + conformityRegion + "-api.cloudconformity.com" + communicationSettingsEndpoint

            def handler(event, context):
              try:
                print("Request Type: " + event["RequestType"])
                responseData = {}
                if event["RequestType"] == "Delete":
                  # get all sns settings
                  req = urllib.request.Request(requestUrl + "?channel=sns&accountId=" + conformityAwsAccountId , headers = headers)
                  with urllib.request.urlopen(req) as resp:
                    body = json.loads(resp.read().decode("utf-8"))
                  # remove the setting with the specific arn
                  for setting in body['data']:
                    if setting['attributes']['configuration']['channelName'] == snsChannelName and setting['attributes']['configuration']['arn'] == conformitySnsArn:
                      settingId = setting['id']
                      req = urllib.request.Request(requestUrl + settingId, headers = headers, method='DELETE')
                      urllib.request.urlopen(req)
                  responseData['Message'] = "Delete successful"
                elif event["RequestType"] == "Create":
                  req = urllib.request.Request(requestUrl, headers = headers)
                  settingDict = {
                    "data": {
                      "type": "settings",
                      "attributes": {
                        "type": "communication",
                        "channel": "sns",
                        "enabled": True,
                        "configuration": {
                          "channelName": snsChannelName,
                          "arn": conformitySnsArn
                        }
                      },
                      "relationships": {
                        "account": {
                          "data": {
                            "type": "accounts",
                            "id": conformityAwsAccountId
                          }
                        }
                      }
                    }
                  }
                  jsonData = json.dumps(settingDict)
                  jsondataasbytes = jsonData.encode('utf-8')
                  with urllib.request.urlopen(req, jsondataasbytes) as resp:
                    body = json.loads(resp.read().decode("utf-8"))
                  settingId = body['data'][0]['id']
                  responseData['CommunicationSettingId'] = settingId
                elif event["RequestType"] == "Update":
                  responseData['Message'] = "Update not supported"
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "ConformityAwsAccountResourcePhysicalID")
              except Exception as e:
                print("Exception occured:")
                print(e)
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, "ConformityAwsAccountResourcePhysicalID")
      Handler: index.handler
      Role: !GetAtt ConformityFunctionRole.Arn
      Runtime: python3.6
  ConformitySnsSettingResource:
    Type: Custom::ConformitySnsSettingFunction
    Properties:
      ServiceToken: !GetAtt ConformitySnsSettingFunction.Arn

Outputs:
  ConformityExternalId:
    Description: The External ID of the Conformity Organization
    Value: !GetAtt ConformityExternalIdCustomResource.ExternalId
  ConformityAccountId:
    Description: The Account ID of the Conformity AWS Account
    Value: !GetAtt ConformityAwsAccountResource.AccountId